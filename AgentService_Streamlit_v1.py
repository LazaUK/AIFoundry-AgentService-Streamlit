import streamlit as st
import os
from azure.ai.projects import AIProjectClient
from azure.ai.projects.models import CodeInterpreterTool
from azure.identity import DefaultAzureCredential
from typing import Any
import matplotlib.pyplot as plt
from PIL import Image
from pathlib import Path

# Author: Laziz Turakulov
# Date: 2024-12-24
# Version: 1.0

# Set page config
st.set_page_config(
    page_title="AgentService-DemoKit",
    page_icon=":ninja:"
)

# Set sidebar navigation
st.sidebar.title("Instructions:")
st.sidebar.write("This Streamlit app is a demo kit for Azure AI Foundry's Agent Service.")
st.sidebar.write("Please, ensure that you setup the right environment variables. For detailes, refer to the source [GitHub page](https://github.com/LazaUK/AIFoundry-AgentService-Streamlit).")
menu = st.sidebar.radio("Choose a capability:", ("Code Interpreter", "Bing Search"))

# Helper Function for Code Interpreter capability
def code_interpreter(prompt):
    conn_str = st.session_state.get('conn_str', os.getenv('AZURE_FOUNDRY_PROJECT_CONNSTRING'))
    images = st.session_state.get('images', [])

    # Initiate AI Project client
    project_client = AIProjectClient.from_connection_string(
        credential=DefaultAzureCredential(),
        conn_str=conn_str
    )

    # Initiate Interpreter Tool
    code_interpreter_tool = CodeInterpreterTool()

    # Initiate Agent Service
    agent = project_client.agents.create_agent(
        model="gpt-4o-mini",
        name="demo-agent",
        instructions="You are a helpful data analyst. In your responses back to users don't share download links, as the images will be retrieved automatically.",
        tools=code_interpreter_tool.definitions,
        tool_resources=code_interpreter_tool.resources
    )
    print(f"Created agent, agent ID: {agent.id}")

    # Create a thread
    thread = project_client.agents.create_thread()
    print(f"Created thread, thread ID: {thread.id}")

    # Create a message
    message = project_client.agents.create_message(
        thread_id=thread.id,
        role="user",
        content=prompt
    )
    print(f"Created message, message ID: {message.id}")

    # Run the agent
    run = project_client.agents.create_and_process_run(
        thread_id=thread.id,
        assistant_id=agent.id
    )
    print(f"Run finished with status: {run.status}")

    # Check the run status
    if run.status == "failed":
        project_client.agents.delete_agent(agent.id)
        return f"Run failed: {run.last_error}"

    # Get the last message from the agent
    messages = project_client.agents.get_messages(thread_id=thread.id)
    last_msg = messages.get_last_text_message_by_sender("assistant")
    result = last_msg.text.value if last_msg else "No response from agent."

    # Retrieve image file
    for image_content in messages.image_contents:
        file_name = f"{image_content.image_file.file_id}_image_file.png"
        project_client.agents.save_file(
            file_id=image_content.image_file.file_id,
            file_name=file_name
        )
        images.append(file_name)

    st.session_state['images'] = images

    # Delete the agent once done
    project_client.agents.delete_agent(agent.id)
    print(f"Deleted agent, agent ID: {agent.id}")

    return result

# Helper Function for Bing Search capability
def bing_search(prompt):
    return f"Search results for: {prompt}"

# Main screen
st.title("Azure AI Foundry's Agent Service Demo Kit")

if menu == "Code Interpreter":
    st.header("Code Interpreter Capability")
    default_prompt = "Could you please analyse the operating profit of Contoso Inc. using the following data and produce a bar chart image: Contoso Inc. Operating Profit: Quarter 1: $2.2 million, Quarter 2: $2.5 million, Quarter 3: $2.3 million, Quarter 4: $3.8 million, Industry Average: $2.5 million. When quarter values in 2024 fall below the industry average, highlight them in red, otherwise they should be green."
    prompt = st.text_area("Enter your prompt:", value=str(default_prompt), height=200)
    if st.button("Run"):
        result = code_interpreter(prompt)
        st.text_area("Output:", value=str(result), height=200)
        if st.session_state.get('images'):
            img = Image.open(st.session_state['images'][0])
            st.image(img, caption="Image generated by Code Interpreter")
    if st.button("Clear"):
        st.text_area("Output:", value="", height=200)
        st.session_state['images'] = []

elif menu == "Bing Search":
    st.header("Bing Search Capability")
    prompt = st.text_area("Enter your search query:", value="Microsoft Azure AI")
    if st.button("Run"):
        result = bing_search(prompt)
        st.text_area("Output:", value=result, height=200)
    if st.button("Clear"):
        st.text_area("Output:", value="", height=200)